/*
 * Copyright 2017 Thibault Seisel
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package com.github.thibseisel.kdenticon

import com.github.thibseisel.kdenticon.rendering.IconGenerator
import com.github.thibseisel.kdenticon.rendering.Rectangle
import com.github.thibseisel.kdenticon.rendering.Renderer
import com.github.thibseisel.kdenticon.rendering.SvgRenderer
import kotlin.jvm.JvmStatic

/**
 * An icon made of simple shapes generated from a hash sequence.
 *
 * Identicons are generally used as placeholder images for user that don't have an avatar.
 * If the same sequence is used to create the icon, then the icon's look will be the same.
 *
 * There are 3 components used to generate an Identicon:
 *
 * - [Renderer] indicates where and how the icon should be drawn.
 * - [IconGenerator] describes the generation algorithm and the available shapes.
 * One could extend this class to define their own shapes and their position in the icon's grid.
 * - [IdenticonStyle] defines parameters that alters the icon's general look such as color and padding.
 *
 * Most common cases such as saving as SVG are covered by [SvgRenderer].
 * If you'd like to use your own implementation of [Renderer], you should pass it to the [draw] method.
 *
 * @constructor Creates a new icon of a given size with the given hash sequence, initialized with
 * default generator and style.
 *
 * While the hash sequence could be anything (calculated from a string, generated by a calculation,
 * queried from storage or network), make sure not to use sensitive information such as password
 * or auth token.
 *
 * @param hash The byte sequence to use as base to generate this icon.
 * There should be at least 6 bytes.
 * @param size The size of this icon in pixels.
 *
 */
public class Identicon(
    public val hash: ByteArray,
    public val size: Int,
) {
    init {
        require(hash.size > 5) { "The hash should be composed at least of 6 bytes." }
        require(size > 0) { "The size should be 1 pixel or larger." }
    }

    /**
     * The generator used to render this icon.
     *
     * This will be an instance of [IconGenerator] by default.
     * Clients may extends the existing [IconGenerator] class and set it to this icon
     * to provide their own custom shapes.
     */
    public var generator: IconGenerator = IconGenerator()

    /**
     * The style for this icon.
     * This dictates what kind of colors use when generating this icon.
     *
     * This is initialized to the [default style][IdenticonStyle.DEFAULT_STYLE].
     */
    public var style: IdenticonStyle = IdenticonStyle.DEFAULT_STYLE

    /**
     * Draws this icon using the specified renderer.
     *
     * This method is intended for usage with custom renderers.
     * A custom renderer could for example render an identicon is a file format not natively supported by KDenticon.
     *
     * @param renderer The renderer used to render this icon.
     * @param rect The bounds of the rendered icon. No padding will be applied to the rectangle.
     */
    public fun draw(renderer: Renderer, rect: Rectangle) {
        generator.generate(renderer, rect, style, hash)
    }

    /**
     * Get the bounds of the icon, taking its padding into account.
     */
    public fun getIconBounds(): Rectangle {
        val scaledPadding = (style.padding * size).toInt()
        return Rectangle(
            x = scaledPadding,
            y = scaledPadding,
            width = size - scaledPadding * 2,
            height = size - scaledPadding * 2
        )
    }

    public companion object {

        /**
         * Creates an identicon from a specified hash.
         *
         * @param hash The hash tha will be used as base for this icon.
         * The hash must contain at least 6 bytes.
         * @param size The width and height or the icon in pixels.
         * The size must be a strictly positive number.
         * @return An identicon instance
         */
        @JvmStatic
        public fun fromHash(hash: ByteArray, size: Int): Identicon = Identicon(hash, size)

        /**
         * Generates a hash from a specified value and creates an Identicon instance from the generated hash.
         * The hash is produced from the string representation of the provided `value` hashed by the SHA-1 algorithm.
         *
         * @param value An object to use as basis to generate the hash
         * @param size The width and height of the icon in pixels.
         * The size must be a strictly positive number.
         * @return An identicon instance
         */
        @JvmStatic
        public fun fromValue(value: Any, size: Int): Identicon {
            val bytes = value.toString().encodeToByteArray()
            return Identicon(sha1Sum(bytes), size)
        }
    }
}
